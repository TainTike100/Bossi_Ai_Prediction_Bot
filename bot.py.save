# ✅ Bossi Bot V11.2 – Backtest Button Integration + ML Accuracy

import time
import datetime
import requests
import joblib
import pandas as pd
from telegram import Bot, ReplyKeyboardMarkup
from collections import deque
from sklearn.ensemble import RandomForestClassifier
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import threading

# === Config ===
MODEL_FILE = "bs_model_nextstep.pkl"
LOG_FILE = "prediction_log.csv"
DATA_FILE = "July 7 2025.xlsx"
TG_TOKEN = "7978804922:AAEvNvIT3CXBFS0fP2KhkVeN6aC5FaDu77U"
API_KEY = "babdf724-f614-46f3-a118-4632a756c016"
HEADERS = {"TRON-PRO-API-KEY": API_KEY}

bot = Bot(token=TG_TOKEN)
subscribers = set()

# === Backtest Accuracy Function ===
def calculate_backtest_accuracy(log_file=LOG_FILE, last_n=100):
    try:
        df = pd.read_csv(log_file).dropna().tail(last_n)
        total = len(df)
        bs_correct = (df['predicted_bs'] == df['actual_bs']).sum()
        num_correct = (df['predicted_digit'] == df['actual_bs']).sum()
        ml_correct = (df['ml_pred'] == df['actual_bs']).sum() if 'ml_pred' in df.columns else bs_correct

        bs_acc = round((bs_correct / total) * 100, 2)
        num_acc = round((num_correct / total) * 100, 2)
        ml_acc = round((ml_correct / total) * 100, 2)

        return (
            f"\n📊 Backtest Accuracy (Last {total} entries)"
            f"\n🔁 BS Pattern: {bs_acc}% ✅"
            f"\n🔢 Num Pattern: {num_acc}% ✅"
            f"\n🧠 ML Prediction: {ml_acc}% ✅"
        )
    except Exception as e:
        return f"❗ Backtest Error: {e}"

# === Telegram Handlers ===
def start(update, context):
    chat_id = update.effective_chat.id
    if chat_id not in subscribers:
        subscribers.add(chat_id)
    keyboard = [['✅ Start', '🛑 End'], ['📊 Backtest']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    context.bot.send_message(chat_id=chat_id, text="✅ Subscribed to Bossi Live Predictions.\nChoose an action below 👇", reply_markup=reply_markup)

def handle_buttons(update, context):
    chat_id = update.effective_chat.id
    text = update.message.text

    if text == "✅ Start":
        subscribers.add(chat_id)
        context.bot.send_message(chat_id=chat_id, text="🚀 Prediction started. You will now receive live updates.")
    elif text == "🛑 End":
        if chat_id in subscribers:
            subscribers.remove(chat_id)
            context.bot.send_message(chat_id=chat_id, text="🛑 Prediction stopped. You will no longer receive updates.")
        else:
            context.bot.send_message(chat_id=chat_id, text="❗ You're not currently subscribed.")
    elif text == "📊 Backtest":
        msg = calculate_backtest_accuracy()
        context.bot.send_message(chat_id=chat_id, text=msg)

updater = Updater(TG_TOKEN, use_context=True)
dp = updater.dispatcher
dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_buttons))
updater.start_polling()

# === Load Dataset ===
df = pd.read_excel(DATA_FILE)
df['number'] = df['number'].astype(str)
df['bs'] = df['bs'].astype(str)

# === Utils ===
def digit_to_bs(d):
    try:
        d = int(d)
        return 'S' if d <= 4 else 'B'
    except:
        return '-'

def predict_next_bs_from_pattern(df, pattern, column='bs', next_step=1):
    pattern_len = len(pattern)
    data = df[column].values.tolist()
    counts = {'B': 0, 'S': 0}
    total_matches = 0
    for i in range(len(data) - pattern_len - next_step + 1):
        window = ''.join(data[i:i+pattern_len])
        if window == pattern:
            next_val = data[i + pattern_len + next_step - 1]
            if column == 'number':
                bs_val = digit_to_bs(str(next_val)[-1])
                if bs_val in counts:
                    counts[bs_val] += 1
                    total_matches += 1
            else:
                if next_val in counts:
                    counts[next_val] += 1
                    total_matches += 1
    if total_matches == 0:
        return '-', 0.0
    next_bs = max(counts, key=counts.get)
    confidence = (counts[next_bs] / total_matches) * 100
    return next_bs, round(confidence, 2)

def extract_features(tail5):
    base16 = '0123456789ABCDEF'
    vec = [base16.index(c) for c in tail5.upper() if c in base16]
    total = sum(vec)
    even_count = sum(1 for v in vec if v % 2 == 0)
    odd_count = 5 - even_count
    diff = vec[-1] - vec[0]
    max_val = max(vec)
    min_val = min(vec)
    digit_from_right = next((int(c) for c in reversed(tail5) if c.isdigit()), -1)
    return vec + [total, total % 10, max_val, min_val, even_count, odd_count, diff, digit_from_right]

def bs_from_tail(tail5):
    digit = next((int(c) for c in reversed(tail5) if c.isdigit()), None)
    return 'B' if digit is not None and digit >= 5 else 'S'

def fetch_block():
    try:
        r = requests.get("https://api.trongrid.io/wallet/getnowblock", headers=HEADERS, timeout=6)
        data = r.json()
        block_id = str(data['blockID']).upper()
        tail = block_id[-5:]
        block_num = int(data['block_header']['raw_data']['number'])
        ts = data['block_header']['raw_data']['timestamp'] / 1000
        dt_utc = datetime.datetime.fromtimestamp(ts, datetime.timezone.utc)
        mm_time = dt_utc + datetime.timedelta(hours=6.5)
        return block_num, tail, mm_time.strftime('%Y-%m-%d %H:%M:%S'), mm_time.strftime('%S')
    except:
        return None, None, None, None

def save_prediction_log(tail5, predicted_bs, predicted_digit, actual_bs, actual_digit, ml_pred='-'):
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    row = {
        "time": now,
        "tail5": tail5,
        "predicted_bs": predicted_bs,
        "predicted_digit": predicted_digit,
        "actual_bs": actual_bs,
        "actual_digit": actual_digit,
        "ml_pred": ml_pred
    }
    try:
        df_log = pd.read_csv(LOG_FILE)
        df_log = pd.concat([df_log, pd.DataFrame([row])], ignore_index=True)
    except FileNotFoundError:
        df_log = pd.DataFrame([row])
    df_log.to_csv(LOG_FILE, index=False)

def retrain_ai_model():
    try:
        df_log = pd.read_csv(LOG_FILE).dropna()
        df_log['label'] = df_log['actual_bs'].map({'B': 1, 'S': 0})
        X = df_log['tail5'].apply(extract_features).tolist()
        y = df_log['label'].tolist()
        model_new = RandomForestClassifier(n_estimators=100)
        model_new.fit(X, y)
        joblib.dump(model_new, MODEL_FILE)
        return model_new
    except:
        return None

try:
    model = joblib.load(MODEL_FILE)
except:
    model = None

bs_queue = deque(maxlen=4)
num_queue = deque(maxlen=4)
last_block = None
last_prediction = None
ml_step = 0
log_trigger = 0

print("\n🚀 Bossi Public Bot V11.2 Started...")

while True:
    try:
        t0 = time.time()
        block_num, tail5, mm_time, mm_sec = fetch_block()
        if not tail5 or mm_sec != '54':
            time.sleep(0.2)
            continue
        if last_block and block_num != last_block + 20:
            time.sleep(0.2)
            continue
        last_block = block_num
        actual_bs = bs_from_tail(tail5)
        actual_digit = next((int(c) for c in reversed(tail5) if c.isdigit()), -1)
        if last_prediction:
            predicted = last_prediction['ml']
            ml_step = 0 if predicted == actual_bs else ml_step + 1
        features = extract_features(tail5)
        ml_pred = 'S'
        if model:
            try:
                label = model.predict([features])[0]
                ml_pred = 'B' if label == 1 else 'S'
            except:
                ml_pred = '-'
        final_ml = ml_pred if ml_step == 0 else f"{ml_pred}{ml_step + 1}"
        bs_queue.append(actual_bs)
        num_queue.append(str(actual_digit))
        pattern_bs = ''.join(bs_queue)
        pattern_num = '-'.join(num_queue)
        pred_bs, conf_bs = predict_next_bs_from_pattern(df, pattern_bs, 'bs')
        pred_num, conf_num = predict_next_bs_from_pattern(df, ''.join(num_queue), 'number')
        msg = (
            f"\n🔮 TRX Pattern Prediction"
            f"\n🪙 Tail5: {tail5}"
            f"\n🔁 BS Pattern ({pattern_bs}) ➜ {pred_bs} ({conf_bs}%)"
            f"\n🔢 Num Pattern ({pattern_num}) ➜ {pred_num} ({conf_num}%)"
            f"\n🧠 ML: {final_ml}"
0            f"\n🕒 MM Time: {mm_time}"
        )
        def send_all():
            for user in subscribers:
                try:
                    bot.send_message(chat_id=user, text=msg)
                except:
                    pass
        threading.Thread(target=send_all).start()
        save_prediction_log(tail5, pred_bs, pred_num, actual_bs, actual_digit, ml_pred=ml_pred)
        last_prediction = {"ml": ml_pred}
        log_trigger += 1
        if log_trigger >= 200:
            model_new = retrain_ai_model()
            if model_new:
                model = model_new
            log_trigger = 0
        t1 = time.time()
        print(f"✅ Sent: {mm_time} | Delay: {round(t1 - t0, 2)} sec")
        time.sleep(0.3)
    except Exception as e:
        print(f"⚠️ Loop Error: {e}")
        time.sleep(0.5)
        continue
